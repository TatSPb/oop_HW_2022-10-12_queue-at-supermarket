### Задание 2

Подходя к кассе супермаркета, мы выбираем очередь, в которой меньше всего людей. Когда становится слишком много людей,
один из сотрудников вызывает Галю, открывающую дополнительную кассу.

Напишите программу, в которой имитируется данное поведение.

Создайте 2 очереди (Queue<String>) с максимальной размерностью 5. Заполните обе очереди случайным количеством элементов
(от 0 до 5 — для каждой очереди свой случайный элемент). В качестве значения используйте имя человека в этой очереди
(можно использовать любую строку/строки).

Напишите новый метод, принимающий строку (имя человека), который добавляет человека в очередь, где меньше всего людей.
Если обе очереди заполнены, выведите в консоль просьбу позвать Галю.

- *Дополнительное условие со звездочкой (необязательно к решению)*

    Создайте еще одну, третью, очередь и включите ее в работу.


Напишите еще один метод, при вызове которого удаляется человек из случайной очереди.

- Критерии оценки
    - Выбрана реализация очереди с возможностью ограничить максимальное количество элементов.
    - Начальное заполнение элементов в 2 очередях выполняется согласно условиям задачи.
    - Новый человек добавляется в очередь с наименьшим количеством элементов.
    - При полном заполнении двух очередей информация об этом выводится на экран (*или создается еще одна очередь).
    - Программа не падает с ошибкой.
    - При удалении элемента очередь выбирается случайно.

### Задание 3

В данном задании мы попрактикуемся в работе с вложенным (двумерным) списком. Двумерный список можно объявить таким способом:

```java
List<List<Int>> biDemArrList = new ArrayList<>();
```

В данном случае мы получим матрицу, содержащую целые числа. Чтобы достать нужное нам число, нужно написать следующий код:

```java
int ourNumber = biDemArrList.get(0).get(1)
```

Где 0 — индекс элемента по вертикали, 1 — индекс по вертикали.

Ваше задание: необходимо сделать 2 доработки в коде, вывести в консоль шахматную доску.

Исходные данные:

```java
void example() {
        List<List<String>> biDemArrList = new ArrayList<>();
        for (int i = 0; i < 8; i++) {
            biDemArrList.add(i, new ArrayList<>());
            for (int j = 0; j < 8; j++) {
                biDemArrList.get(i).add(j, "◯");
            }
        }
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                System.out.print(biDemArrList.get(i).get(j) + " ");
            }
        }
    }
```

Первый этап: дополнить цикл с выводом таким образом, чтобы на выходе программа стала выводить в консоль шахматную доску со всеми белыми клетками (перенос строк после каждого 8-го элемента):

◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯

◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯

◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯

◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯

◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯

◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯

◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯

◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯

Второй этап: изменить заполнение двумерного списка, добавив символ ● (черная клетка) так, чтобы вывод кружков стал в шахматном порядке:

◯ ● ◯ ● ◯ ● ◯ ●

● ◯ ● ◯ ● ◯ ● ◯

◯ ● ◯ ● ◯ ● ◯ ●

● ◯ ● ◯ ● ◯ ● ◯

◯ ● ◯ ● ◯ ● ◯ ●

● ◯ ● ◯ ● ◯ ● ◯

◯ ● ◯ ● ◯ ● ◯ ●

● ◯ ● ◯ ● ◯ ● ◯

- Критерии оценки
    - В консоль кружки выводятся в шахматном порядке: черный-белый.
    - Создание переменной biDemArrList не было изменено.